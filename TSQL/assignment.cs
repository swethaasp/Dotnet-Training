/*Q1. Write CREATE TABLE commands for the following table descriptions:*/
CREATE TABLE CLIENT_MASTER (
    CLIENTNO VARCHAR(6) PRIMARY KEY CHECK (CLIENTNO LIKE 'C%'),
    NAME VARCHAR(20) NOT NULL,
    ADDRESS1 VARCHAR(30),
    ADDRESS2 VARCHAR(30),
    CITY VARCHAR(15),
    PINCODE NUMERIC(8),
    STATE VARCHAR(15),
    BALDUE NUMERIC(10,2)
);

CREATE TABLE PRODUCT_MASTER (
    PRODUCTNO VARCHAR(6) PRIMARY KEY CHECK (PRODUCTNO LIKE 'P%'),
    DESCRIPTION VARCHAR(15) NOT NULL,
    PROFITPERC NUMERIC(4,2) NOT NULL,
    UNITMEASURE VARCHAR(10) NOT NULL,
    QTYONHAND NUMERIC(8) NOT NULL,
    REORDERLVL NUMERIC(8) NOT NULL,
    SELLPRICE NUMERIC(8,2) NOT NULL CHECK (SELLPRICE > 0),
    COSTPRICE NUMERIC(8,2) NOT NULL CHECK (COSTPRICE > 0)
);

CREATE TABLE SALESMAN_MASTER (
    SALESMANNO VARCHAR(6) PRIMARY KEY CHECK (SALESMANNO LIKE 'S%'),
    SALESMANNAME VARCHAR(20) NOT NULL,
    ADDRESS1 VARCHAR(30) NOT NULL,
    ADDRESS2 VARCHAR(30),
    CITY VARCHAR(20),
    PINCODE NUMERIC(8),
    STATE VARCHAR(20),
    SALAMT NUMERIC(8,2) NOT NULL CHECK (SALAMT > 0),
    TGTTOGET NUMERIC(6,2) NOT NULL,
    YTDSALES NUMERIC(6,2) NOT NULL,
    REMARKS VARCHAR(60)
);

CREATE TABLE SALES_ORDER (
    ORDERNO VARCHAR(6) PRIMARY KEY CHECK (ORDERNO LIKE 'O%'),
    CLIENTNO VARCHAR(6) REFERENCES CLIENT_MASTER(CLIENTNO),
    ORDERDATE DATE,
    DELYADDR VARCHAR(25),
    SALESMANNO VARCHAR(6) REFERENCES SALESMAN_MASTER(SALESMANNO),
    DELYTYPE CHAR(1) CHECK (DELYTYPE IN ('P', 'F')),
    BILLEDYN CHAR(1) CHECK (BILLEDYN IN ('Y', 'N')),
    DELYDATE DATE,
    ORDERSTATUS VARCHAR(10) CHECK (ORDERSTATUS IN ('In Process', 'Fulfilled', 'Backorder', 'Cancelled'))
);

CREATE TABLE SALES_ORDER_DETAILS (
    ORDERNO VARCHAR(6),
    PRODUCTNO VARCHAR(6),
    QTYORDERED NUMERIC(8),
    QTYDISP NUMERIC(8),
    PRODUCTRATE NUMERIC(10,2),
    PRIMARY KEY (ORDERNO, PRODUCTNO),
    FOREIGN KEY (ORDERNO) REFERENCES SALES_ORDER(ORDERNO),
    FOREIGN KEY (PRODUCTNO) REFERENCES PRODUCT_MASTER(PRODUCTNO)
);

/*Sample Insert Commands */

INSERT INTO CLIENT_MASTER (CLIENTNO, NAME, CITY, PINCODE, STATE, BALDUE) 
VALUES ('C00001', 'Ivan Bayross', 'Mumbai', 400054, 'Maharashtra', 15000);

INSERT INTO PRODUCT_MASTER VALUES ('P00001', 'T-Shirts', 5, 'Piece', 200, 50, 350, 250);

INSERT INTO SALESMAN_MASTER VALUES ('S00001', 'Annan', 'A/14', 'Worli', 'Mumbai', 400002, 'Maharashtra', 3000, 100, 50, 'Good');

INSERT INTO SALES_ORDER (ORDERNO, ORDERDATE, CLIENTNO, DELYTYPE, BILLEDYN, SALESMANNO, DELYDATE, ORDERSTATUS) 
VALUES ('O19001', '12-JUN-02', 'C00001', 'F', 'N', 'S00001', '20-JUL-02', 'In Process');

INSERT INTO SALES_ORDER_DETAILS (ORDERNO, PRODUCTNO, QTYORDERED, QTYDISP, PRODUCTRATE) 
VALUES ('O19001', 'P00001', 4, 4, 525);

/*Answer following queries with the help of above schema : */

/*1. Display the names of all the clients.*/
SELECT NAME FROM CLIENT_MASTER;

/*2. Display all the clients who are located in Mumbai.*/
SELECT * FROM CLIENT_MASTER WHERE CITY = 'Mumbai';

/*3. Display all the products whose selling price is > 2000 and < 5000.*/
INSERT INTO PRODUCT_MASTER (PRODUCTNO, DESCRIPTION, PROFITPERC, UNITMEASURE, QTYONHAND, REORDERLVL, SELLPRICE, COSTPRICE)
VALUES ('P00002', 'Jeans', 10, 'Piece', 150, 30, 2500, 2000);

INSERT INTO PRODUCT_MASTER (PRODUCTNO, DESCRIPTION, PROFITPERC, UNITMEASURE, QTYONHAND, REORDERLVL, SELLPRICE, COSTPRICE)
VALUES ('P00003', 'Jackets', 15, 'Piece', 100, 20, 3200, 2800);

INSERT INTO PRODUCT_MASTER (PRODUCTNO, DESCRIPTION, PROFITPERC, UNITMEASURE, QTYONHAND, REORDERLVL, SELLPRICE, COSTPRICE)
VALUES ('P00004', 'Shoes', 12, 'Pair', 200, 40, 4500, 3500);

INSERT INTO PRODUCT_MASTER (PRODUCTNO, DESCRIPTION, PROFITPERC, UNITMEASURE, QTYONHAND, REORDERLVL, SELLPRICE, COSTPRICE)
VALUES ('P00005', 'Sweaters', 8, 'Piece', 180, 25, 2750, 2300);

INSERT INTO PRODUCT_MASTER (PRODUCTNO, DESCRIPTION, PROFITPERC, UNITMEASURE, QTYONHAND, REORDERLVL, SELLPRICE, COSTPRICE)
VALUES ('P00006', 'Blazers', 20, 'Piece', 80, 15, 4800, 4000);

SELECT * FROM PRODUCT_MASTER WHERE SELLPRICE > 2000 AND SELLPRICE < 5000;

/*4. Display Name, City and State of Clients not in the state of Maharashtra.*/
INSERT INTO CLIENT_MASTER (CLIENTNO, NAME, ADDRESS1, ADDRESS2, CITY, PINCODE, STATE, BALDUE)
VALUES ('C00002', 'John Doe', '123 Street', 'Block A', 'Chennai', 600001, 'Tamil Nadu', 5000);

INSERT INTO CLIENT_MASTER (CLIENTNO, NAME, ADDRESS1, ADDRESS2, CITY, PINCODE, STATE, BALDUE)
VALUES ('C00003', 'Jane Smith', '456 Avenue', 'Sector B', 'Bangalore', 560001, 'Karnataka', 8000);

INSERT INTO CLIENT_MASTER (CLIENTNO, NAME, ADDRESS1, ADDRESS2, CITY, PINCODE, STATE, BALDUE)
VALUES ('C00004', 'Michael Johnson', '789 Boulevard', 'Block C', 'Kolkata', 700001, 'West Bengal', 12000);

SELECT NAME, CITY, STATE FROM CLIENT_MASTER WHERE STATE != 'Maharashtra';
SELECT NAME, CITY, STATE FROM CLIENT_MASTER WHERE STATE <> 'Maharashtra';

/*5. Display all the information of client no C0001 and C0002.*/
SELECT * FROM CLIENT_MASTER WHERE CLIENTNO IN ('C00001', 'C00002');

/*6. Change the selling price of '1.44 drive' to Rs. 1150.50.*/

INSERT INTO PRODUCT_MASTER (PRODUCTNO, DESCRIPTION, PROFITPERC, UNITMEASURE, QTYONHAND, REORDERLVL, SELLPRICE, COSTPRICE) 
VALUES ('P00007', '1.44 drive', 10.00, 'Piece', 150, 30, 1000.00, 900.00);

INSERT INTO PRODUCT_MASTER (PRODUCTNO, DESCRIPTION, PROFITPERC, UNITMEASURE, QTYONHAND, REORDERLVL, SELLPRICE, COSTPRICE) 
VALUES ('P00008', 'Hard Disk', 8.00, 'Piece', 200, 50, 4000.00, 3500.00);

INSERT INTO PRODUCT_MASTER (PRODUCTNO, DESCRIPTION, PROFITPERC, UNITMEASURE, QTYONHAND, REORDERLVL, SELLPRICE, COSTPRICE) 
VALUES ('P00009', 'Keyboard', 5.00, 'Piece', 300, 40, 500.00, 450.00);

UPDATE PRODUCT_MASTER SET SELLPRICE = 1150.50 WHERE DESCRIPTION = '1.44 drive';
SELECT * FROM PRODUCT_MASTER;

/* 7. Delete the record of client no C0005.*/
SELECT * FROM CLIENT_MASTER;
INSERT INTO CLIENT_MASTER (CLIENTNO, NAME, ADDRESS1, ADDRESS2, CITY, PINCODE, STATE, BALDUE)
VALUES ('C00005', 'Janani', '45 anna nagar', 'Block B','Bangalore', 560002, 'Karnataka', 8000);
DELETE FROM CLIENT_MASTER WHERE CLIENTNO = 'C00005';

/*8. Display the clients who stay in a city whose second letter is 'a'*/
SELECT * FROM CLIENT_MASTER WHERE CITY LIKE '_a%';

/*9. Count the number of products having price greater than or equal to 1500.*/
SELECT * FROM PRODUCT_MASTER;
SELECT COUNT(*) FROM PRODUCT_MASTER WHERE SELLPRICE >= 1500;
SELECT COUNT(*) FROM PRODUCT_MASTER WHERE COSTPRICE >= 1500;

/*10. Display qtyordered, qtydisp and balancedqty (not in table).*/
SELECT * FROM SALES_ORDER_DETAILS;
SELECT QTYORDERED, QTYDISP, (QTYORDERED - QTYDISP) AS BALANCEDQTY FROM SALES_ORDER_DETAILS;

/*Write Commands to do following*/
/*1. Make ClientNo as Primary Key in Client Master.*/
SELECT * FROM CLIENT_MASTER;
ALTER TABLE CLIENT_MASTER ADD PRIMARY KEY (CLIENTNO);

/*2. Add a new column phone no in the client master table.*/
ALTER TABLE CLIENT_MASTER ADD PHONENO VARCHAR(15);
SELECT * FROM CLIENT_MASTER;

/*3. Add the not null constraint in the product master table with the column description, profit percent, sell price, and cost price.*/
SELECT * FROM PRODUCT_MASTER;
ALTER TABLE PRODUCT_MASTER ALTER COLUMN DESCRIPTION VARCHAR(15) NOT NULL;
ALTER TABLE PRODUCT_MASTER ALTER COLUMN PROFITPERC NUMERIC(4,2) NOT NULL;
ALTER TABLE PRODUCT_MASTER ALTER COLUMN  SELLPRICE NUMERIC(8,2) NOT NULL ; 
ALTER TABLE PRODUCT_MASTER ALTER COLUMN COSTPRICE NUMERIC(8,2) NOT NULL ;

/* 4. Change size of the name column to 60 in the client master table.*/
ALTER TABLE CLIENT_MASTER ALTER COLUMN  NAME VARCHAR(60);

/*5. Remove the pincode column from the table.*/
SELECT * FROM CLIENT_MASTER;
ALTER TABLE CLIENT_MASTER DROP COLUMN PINCODE;

/*Define in 1 or 2 lines and give one example also*/
/* 1. Recursive Relationship*/
CREATE TABLE EMPLOYEE (
    EMPLOYEE_ID VARCHAR(6) PRIMARY KEY,
    NAME VARCHAR(30) NOT NULL,
    MANAGER_ID VARCHAR(6),  -- Recursive relationship
    FOREIGN KEY (MANAGER_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID)
);

INSERT INTO EMPLOYEE (EMPLOYEE_ID, NAME, MANAGER_ID) VALUES ('E001', 'John Doe', NULL);
INSERT INTO EMPLOYEE (EMPLOYEE_ID, NAME, MANAGER_ID) VALUES ('E002', 'Jane Smith', 'E001');
INSERT INTO EMPLOYEE (EMPLOYEE_ID, NAME, MANAGER_ID) VALUES ('E003', 'Bob Johnson', 'E001');
INSERT INTO EMPLOYEE (EMPLOYEE_ID, NAME, MANAGER_ID) VALUES ('E004', 'Alice Brown', 'E002');

SELECT E1.NAME AS EMPLOYEE, E2.NAME AS MANAGER
FROM EMPLOYEE E1
LEFT JOIN EMPLOYEE E2 ON E1.MANAGER_ID = E2.EMPLOYEE_ID;

/*2. Composite Key Example*/
INSERT INTO SALES_ORDER (ORDERNO, ORDERDATE, CLIENTNO, DELYTYPE, BILLEDYN, SALESMANNO, DELYDATE, ORDERSTATUS) 
VALUES ('O19003', '15-JUN-02', 'C00001', 'P', 'Y', 'S00001', '25-JUL-02', 'Fulfilled');

INSERT INTO SALES_ORDER_DETAILS (ORDERNO, PRODUCTNO, QTYORDERED, QTYDISP, PRODUCTRATE) 
VALUES ('O19003', 'P00002', 3, 3, 500);



SELECT * FROM PRODUCT_MASTER;
SELECT * FROM SALES_ORDER;
SELECT * FROM SALES_ORDER_DETAILS
SELECT * FROM SALES_ORDER_DETAILS WHERE ORDERNO = 'O19002' AND PRODUCTNO = 'P00002';

/*3.LIKE Operator with Pattern Matching*/
SELECT * FROM CLIENT_MASTER WHERE CITY LIKE 'M%';

/*4.DROP TABLE Command*/
DROP TABLE EMPLOYEE;

/*5. Full Outer Join*/
SELECT * 
FROM CLIENT_MASTER 
FULL OUTER JOIN SALES_ORDER ON CLIENT_MASTER.CLIENTNO = SALES_ORDER.CLIENTNO;

/*Queries with Joins*/
/*1. Find out the products, which have been sold to 'Ivan Bayross'.*/
SELECT P.PRODUCTNO, P.DESCRIPTION
FROM PRODUCT_MASTER P
JOIN SALES_ORDER_DETAILS SOD ON P.PRODUCTNO = SOD.PRODUCTNO
JOIN SALES_ORDER SO ON SOD.ORDERNO = SO.ORDERNO
JOIN CLIENT_MASTER CM ON SO.CLIENTNO = CM.CLIENTNO
WHERE CM.NAME = 'Ivan Bayross';

/*2. Finding out the products and their quantities that will have to be delivered in the current month.*/
SELECT * FROM PRODUCT_MASTER;
SELECT * FROM SALES_ORDER;
SELECT * FROM SALES_ORDER_DETAILS;
INSERT INTO SALES_ORDER (ORDERNO, ORDERDATE, CLIENTNO, DELYTYPE, BILLEDYN, SALESMANNO, DELYDATE, ORDERSTATUS)
VALUES 
('O20001', '2024-09-01', 'C00001', 'P', 'Y', 'S00001', '2024-09-15', 'In Process');

INSERT INTO SALES_ORDER_DETAILS (ORDERNO, PRODUCTNO, QTYORDERED, QTYDISP, PRODUCTRATE)
VALUES 
('O20001', 'P00001', 10, 2, 500),
('O20001', 'P00002', 5, 1, 1500);

SELECT P.PRODUCTNO, P.DESCRIPTION, 
       SOD.QTYORDERED - SOD.QTYDISP AS TO_BE_DELIVERED
FROM PRODUCT_MASTER P
JOIN SALES_ORDER_DETAILS SOD ON P.PRODUCTNO = SOD.PRODUCTNO
JOIN SALES_ORDER SO ON SOD.ORDERNO = SO.ORDERNO
WHERE MONTH(SO.DELYDATE) = MONTH(GETDATE())
AND YEAR(SO.DELYDATE) = YEAR(GETDATE());

/*3. Listing the ProductNo and description of constantly sold (i.e., rapidly moving) products.*/
SELECT PRODUCTNO, DESCRIPTION
FROM PRODUCT_MASTER
WHERE PRODUCTNO IN (
    SELECT PRODUCTNO
    FROM SALES_ORDER_DETAILS
    GROUP BY PRODUCTNO
    HAVING COUNT(*) > 1
);

/*4. Finding the names of clients who have purchased 'Trousers'.*/
SELECT * FROM CLIENT_MASTER;
SELECT * FROM PRODUCT_MASTER;
SELECT * FROM SALES_ORDER;
SELECT * FROM SALES_ORDER_DETAILS;

INSERT INTO PRODUCT_MASTER (PRODUCTNO, DESCRIPTION, PROFITPERC, UNITMEASURE, QTYONHAND, REORDERLVL, SELLPRICE, COSTPRICE)
VALUES ('P00012', 'Trousers', 15.00, 'Piece', 100, 50, 1200.00, 800.00);

INSERT INTO SALES_ORDER (ORDERNO, ORDERDATE, CLIENTNO, DELYTYPE, BILLEDYN, SALESMANNO, DELYDATE, ORDERSTATUS)
VALUES ('O19012', '01-SEP-24', 'C00001', 'F', 'Y', 'S00001', '10-SEP-24', 'Fulfilled');

INSERT INTO SALES_ORDER_DETAILS (ORDERNO, PRODUCTNO, QTYORDERED, QTYDISP, PRODUCTRATE)
VALUES ('O19012', 'P00012', 3, 3, 1200.00);

SELECT * FROM PRODUCT_MASTER WHERE DESCRIPTION = 'Trousers';

SELECT * FROM SALES_ORDER WHERE ORDERNO = 'O19012';

SELECT * FROM SALES_ORDER_DETAILS WHERE ORDERNO = 'O19012';

SELECT CM.NAME
FROM CLIENT_MASTER CM
JOIN SALES_ORDER SO ON CM.CLIENTNO = SO.CLIENTNO
JOIN SALES_ORDER_DETAILS SOD ON SO.ORDERNO = SOD.ORDERNO
JOIN PRODUCT_MASTER PM ON SOD.PRODUCTNO = PM.PRODUCTNO
WHERE PM.DESCRIPTION = 'Trousers';

/*5. Listing the products and orders from customers who have ordered less than 5 units of 'Pull Overs'.*/

SELECT * FROM PRODUCT_MASTER WHERE DESCRIPTION = 'Pull Overs';
INSERT INTO PRODUCT_MASTER (PRODUCTNO, DESCRIPTION, PROFITPERC, UNITMEASURE, QTYONHAND, REORDERLVL, SELLPRICE, COSTPRICE)
VALUES ('P00015', 'Pull Overs', 10, 'Piece', 100, 10, 500, 300);

INSERT INTO CLIENT_MASTER (CLIENTNO, NAME, CITY, STATE, BALDUE)
VALUES ('C00015', 'John Doe', 'New York', 'New York', 2000);

INSERT INTO SALES_ORDER (ORDERNO, ORDERDATE, CLIENTNO, DELYTYPE, BILLEDYN, SALESMANNO, DELYDATE, ORDERSTATUS)
VALUES ('O00001', '2024-09-01', 'C00001', 'P', 'Y', 'S00001', '2024-09-05', 'In Process');

INSERT INTO SALES_ORDER_DETAILS (ORDERNO, PRODUCTNO, QTYORDERED, QTYDISP, PRODUCTRATE)
VALUES ('O00001', 'P00001', 4, 4, 500);

INSERT INTO SALES_ORDER_DETAILS (ORDERNO, PRODUCTNO, QTYORDERED, QTYDISP, PRODUCTRATE)
VALUES ('O00001', 'P00015', 4, 4, 500);



SELECT CM.CLIENTNO, CM.NAME, PM.PRODUCTNO, PM.DESCRIPTION, SOD.QTYORDERED
FROM CLIENT_MASTER CM
JOIN SALES_ORDER SO ON CM.CLIENTNO = SO.CLIENTNO
JOIN SALES_ORDER_DETAILS SOD ON SO.ORDERNO = SOD.ORDERNO
JOIN PRODUCT_MASTER PM ON SOD.PRODUCTNO = PM.PRODUCTNO
WHERE PM.DESCRIPTION = 'Pull Overs' AND SOD.QTYORDERED < 5;

/*subqueries*/
/*1. Finding the non-moving products (i.e., products not being sold).*/
SELECT PM.PRODUCTNO, PM.DESCRIPTION
FROM PRODUCT_MASTER PM
LEFT JOIN SALES_ORDER_DETAILS SOD ON PM.PRODUCTNO = SOD.PRODUCTNO
WHERE SOD.PRODUCTNO IS NULL;

/*2. Finding the name and complete address for the customer who has placed Order number 'O19001'.*/

SELECT CM.NAME, CM.ADDRESS1, CM.ADDRESS2, CM.CITY, CM.STATE
FROM CLIENT_MASTER CM
JOIN SALES_ORDER SO ON CM.CLIENTNO = SO.CLIENTNO
WHERE SO.ORDERNO = 'O19001';

/*3. Finding the clients who have placed orders before the month of May'02*/
-- Inserting sample data with orders before May 2002

SELECT * FROM SALES_ORDER;
INSERT INTO SALES_ORDER (ORDERNO, CLIENTNO, ORDERDATE, DELYADDR, DELYTYPE, BILLEDYN, ORDERSTATUS)
VALUES ('O19021', 'C00001', '2002-04-15', 'Address1', 'F', 'Y', 'In Process');

INSERT INTO SALES_ORDER (ORDERNO, CLIENTNO, ORDERDATE, DELYADDR, DELYTYPE, BILLEDYN, ORDERSTATUS)
VALUES ('O19022', 'C00002', '2002-03-10', 'Address2', 'P', 'N', 'Fulfilled');

INSERT INTO SALES_ORDER (ORDERNO, CLIENTNO, ORDERDATE, DELYADDR, DELYTYPE, BILLEDYN,ORDERSTATUS)
VALUES ('O19023', 'C00003', '2002-04-25', 'Address3', 'F', 'Y', 'Backorder');

SELECT ORDERNO, CLIENTNO, ORDERDATE
FROM SALES_ORDER
WHERE ORDERDATE < '2002-05-02';


SELECT DISTINCT CM.CLIENTNO, CM.NAME, CM.ADDRESS1, CM.ADDRESS2, CM.CITY, CM.STATE
FROM CLIENT_MASTER CM
JOIN SALES_ORDER SO ON CM.CLIENTNO = SO.CLIENTNO
WHERE SO.ORDERDATE < '2002-05-01';


/*1. Display System Date as Saturday, February 11, 2012*/
SELECT FORMAT(GETDATE(), 'dddd, MMMM dd, yyyy') AS FormattedDate;

/*2. Display Balance Due with a Specific Format*/

DECLARE @BalanceDue DECIMAL(10, 2) = 99999.99;
SELECT FORMAT(@BalanceDue, 'C', 'en-US') AS FormattedBalanceDue;

DECLARE @SalesmanName VARCHAR(50) = 'Annan';
DECLARE @GoodsSold INT = 50;
DECLARE @Target INT = 100;

SELECT CONCAT('Salesman ', @SalesmanName, ' sold goods of ', @GoodsSold, ' while given target was ', @Target, '.') AS CustomMessage;

DECLARE @BirthDate DATE = '2002-08-23';
SELECT DATEDIFF(YEAR, @BirthDate, GETDATE()) AS AgeInYears;

/*PL/SQL*/
/*1. PL/SQL Block to Check if a Number is Even or Odd */

DECLARE @Number INT = 7; -- You can change this number to test different cases

IF @Number % 2 = 0
    PRINT 'The number is even.';
ELSE
    PRINT 'The number is odd.';

/*2. PL/SQL Block to Check if a Person Can Vote*/

IF OBJECT_ID('CheckVotingEligibility', 'P') IS NOT NULL
    DROP PROCEDURE CheckVotingEligibility;
GO


CREATE PROCEDURE CheckVotingEligibility
    @Age INT
AS
BEGIN
    IF @Age >= 18
        PRINT 'The person is eligible to vote.';
    ELSE
        PRINT 'The person is not eligible to vote.';
END;
GO
-- Call the stored procedure 
EXEC CheckVotingEligibility @Age = 20;

/*3. Create a Trigger for After Insert or Update*/
-- Drop the trigger if it already exists
IF OBJECT_ID('trg_UpdateOrderStatus', 'TR') IS NOT NULL
    DROP TRIGGER trg_UpdateOrderStatus;
GO

-- Create the trigger
CREATE TRIGGER trg_UpdateOrderStatus
ON SALES_ORDER
AFTER INSERT, UPDATE
AS
BEGIN
    -- Update order status based on the quantity ordered and dispatched
    UPDATE SALES_ORDER
    SET ORDERSTATUS = CASE
        WHEN (SELECT SUM(QTYORDERED) FROM SALES_ORDER_DETAILS WHERE ORDERNO = inserted.ORDERNO) 
             = (SELECT SUM(QTYDISP) FROM SALES_ORDER_DETAILS WHERE ORDERNO = inserted.ORDERNO)
        THEN 'Fulfilled'
        WHEN (SELECT SUM(QTYDISP) FROM SALES_ORDER_DETAILS WHERE ORDERNO = inserted.ORDERNO) 
             = 0
        THEN 'Backorder'
        ELSE 'In-Process'
    END
    FROM SALES_ORDER AS so
    INNER JOIN inserted ON so.ORDERNO = inserted.ORDERNO;
END;
GO



                                   




















